import{_ as T,p as y,c as i,o,a,k as c,q as D,F as f,g as h,t as u,v as p,s as m,r as C,b as g}from"./index-DwHvbeIw.js";const _={props:{executions:Array,sortOrder:String},data(){return{filterStatus:"",filterStartDate:"",filterEndDate:"",statusChoices:[{value:"in_progress",label:"In Progress"},{value:"passed",label:"Passed"},{value:"failed",label:"Failed"}],testCaseTitles:{}}},computed:{filteredExecutions(){return this.executions.filter(e=>{const t=!this.filterStatus||e.status===this.filterStatus,r=new Date(e.started_at),d=this.filterStartDate?new Date(this.filterStartDate):null,l=this.filterEndDate?new Date(this.filterEndDate):null,n=(!d||r>=d)&&(!l||r<=l);return t&&n}).sort((e,t)=>{const r=new Date(e.started_at),d=new Date(t.started_at);return this.sortOrder==="asc"?r-d:d-r})}},watch:{executions:{immediate:!0,async handler(e){if(e&&e.length>0){const t=[...new Set(e.map(r=>r.test_case))];console.log("Test Case IDs:",t),await Promise.all(t.map(r=>this.fetchTestCaseTitle(r))),console.log("Updated testCaseTitles:",this.testCaseTitles)}else this.testCaseTitles={}}}},methods:{async fetchTestCaseTitle(e){try{const t=await y.get(`/test-cases/${e}/`);console.log("Fetched Test Case:",t.data),this.testCaseTitles={...this.testCaseTitles,[e]:t.data.title||"Unknown"},console.log("Updated testCaseTitles:",this.testCaseTitles)}catch(t){console.error("Error fetching test case title:",t),this.$set(this.testCaseTitles,e,"Unknown")}},getTestCaseTitle(e){return this.testCaseTitles[e]?this.testCaseTitles[e]:this.testCaseTitles.hasOwnProperty(e)?this.testCaseTitles[e]:"Loading..."},getStatusLabel(e){const t=this.statusChoices.find(r=>r.value===e);return t?t.label:e},formatDate(e){return new Date(e).toLocaleString()},statusClass(e){return e==="passed"?"status-pass":"status-fail"},sortBy(e){this.executions.sort((t,r)=>t[e]<r[e]?this.sortOrder==="asc"?-1:1:t[e]>r[e]?this.sortOrder==="asc"?1:-1:0)}}},v={class:"filters"},S=["value"],w={class:"date-filters"},x={key:0,class:"table"},b={key:1,class:"no-data-message"};function k(e,t,r,d,l,n){return o(),i("div",null,[a("div",v,[c(a("select",{"onUpdate:modelValue":t[0]||(t[0]=s=>l.filterStatus=s),class:"filter-select"},[t[6]||(t[6]=a("option",{value:""},"All Statuses",-1)),(o(!0),i(f,null,h(l.statusChoices,s=>(o(),i("option",{key:s.value,value:s.value},u(s.label),9,S))),128))],512),[[D,l.filterStatus]]),a("div",w,[c(a("input",{type:"date","onUpdate:modelValue":t[1]||(t[1]=s=>l.filterStartDate=s),class:"filter-input",placeholder:"Start Date"},null,512),[[p,l.filterStartDate]]),c(a("input",{type:"date","onUpdate:modelValue":t[2]||(t[2]=s=>l.filterEndDate=s),class:"filter-input",placeholder:"End Date"},null,512),[[p,l.filterEndDate]])])]),n.filteredExecutions.length>0?(o(),i("table",x,[a("thead",null,[a("tr",null,[a("th",{onClick:t[3]||(t[3]=s=>n.sortBy("test_case"))},"Test Case"),a("th",{onClick:t[4]||(t[4]=s=>n.sortBy("started_at"))},"Execution Date"),a("th",{onClick:t[5]||(t[5]=s=>n.sortBy("status"))},"Status"),t[7]||(t[7]=a("th",null,"Comments",-1))])]),a("tbody",null,[(o(!0),i(f,null,h(n.filteredExecutions,s=>(o(),i("tr",{key:s.id},[a("td",null,u(n.getTestCaseTitle(s.test_case)),1),a("td",null,u(n.formatDate(s.started_at)),1),a("td",{class:m(n.statusClass(s.status))},u(n.getStatusLabel(s.status)),3),a("td",null,u(s.notes||"No comments"),1)]))),128))])])):(o(),i("p",b,"ðŸš« No test executions found."))])}const E=T(_,[["render",k],["__scopeId","data-v-7ddedeff"]]),B={components:{TestHistoryTable:E},data(){return{executions:[]}},async created(){await this.fetchTestHistory()},methods:{async fetchTestHistory(){try{const e=await y.get("/test-executions");this.executions=e.data}catch(e){console.error("Error fetching test history:",e)}}}},H={class:"test-history-container"};function U(e,t,r,d,l,n){const s=C("TestHistoryTable");return o(),i("div",H,[t[0]||(t[0]=a("h2",{class:"page-title"}," Test Execution History",-1)),g(s,{executions:l.executions},null,8,["executions"])])}const O=T(B,[["render",U],["__scopeId","data-v-29279dd0"]]);export{O as default};
